% Author: Riley Culberg
% Date: 12/7/2020
%
% This scripts cleans the surface echo power data before leveling by
% removing area of power loss due to aircraft roll or other areas with
% exceptionally high or low power outside the expected variability of the
% signal. This script is intended to be run interactively, as the user will
% need to manually select the region of surface power that shows typical 
% variability in order to filter other regions. To run interactively, place
% cursor in the portion of code to execute and hit CTRL-ENTER.
%
% Outputs:
%   seg_num3 - radargram number
%   index3 - trace number in radargram segment
%   lat3 - latitude of measurements
%   lon3 - longitude of measurements
%   altitude3 - flight clearance over ice in meters
%   surf_geo_pow3 - surface echo power in dB
%   surf_ind3 - fast time sample location of ice surface in radargram
% 
% Data dependencies:
% CReSIS L1B radargrams - ./DemoData/Data_20170422_01_158.mat for demoing
% the functionality
% Surface location and power tracking - ./DemoData/Demo_Surface.mat for
% showing functionality (was originally  generated by running 
% RetrackSurface.m on all data)
% ------------------------------------------------------------------------

clear;

addpath(genpath('./ReferenceFunctions/'));

base_dir = './DemoData/';
transects = {'20170422_01'};
segments{1} = [158];

m = 1;         % Set the transect to load

seg_num = [];
index = [];
radar = [];
lat = [];
lon = [];
roll = [];

% Load radar data from the for the entire transect
for k = 1:length(segments{m})
    file = strcat(base_dir,'Data_', transects{m}, '_', num2str(segments{m}), '.mat');
    load(file);
    
    seg_num = [seg_num segments{m}(k)*ones(1,length(Latitude))];
    index = [index 1:1:length(Latitude)];
    if k > 1 && size(Data,1) < size(radar,1)
        Data = vertcat(Data, zeros(size(radar,1) - size(Data,1), size(Data,2)));
    elseif k > 1 && size(Data,1) > size(radar,1)
        radar = vertcat(radar, zeros(size(Data,1) - size(radar,1), size(radar,2)));
    end
    radar = [radar Data];
    lat = [lat Latitude];
    lon = [lon Longitude];
    if exist('Roll', 'var')
        roll = [roll Roll];
    end
end

% If no roll data is available, calculate the change in heading as a proxy
if isempty(roll) || sum(roll) == 0
    [x,y] = ll2psn(lat, lon);
    theta = atan2(diff(y), diff(x));
    theta = [theta(1) theta];
    grad_theta = gradient(theta);
end

% Load the tracked surface
surf_ind = [];
load('./DemoData/Demo_Surface.mat');

% Concatenate surface location
for k = 1:length(surf)
    surf_ind = [surf_ind surf{k}];
end

% Concatenate surface power
surf_pow = zeros(size(surf_ind));
for k = 1:length(surf_pow)
    surf_pow(k) = 10*log10(radar(surf_ind(k),k));
end

% Calculate flight clearance above ice surface
c = 299792458;
altitude = zeros(1, length(surf_ind));
for k = 1:length(surf_ind)
    altitude(k) = 0.5*Time(surf_ind(k))*c;
end

% Geometrically correct the surface power
surf_geo_pow = surf_pow + 20*log10(2*altitude);

% Discard points that exceed either the roll or heading change tolerance
if ~isempty(roll(1:length(surf_ind))) && abs(sum(roll(1:length(surf_ind)))) > 0
    good_roll = find(abs(roll(1:length(surf_ind))) < 0.05);
else
    good_roll = find(abs(grad_theta) < 6e-4);
end

% Saved cleaned data to new variables
seg_num2 = seg_num(good_roll);
index2 = index(good_roll);
radar2 = radar(:,good_roll);
lat2 = lat(good_roll);
lon2 = lon(good_roll);
altitude2 = altitude(good_roll);
surf_geo_pow2 = surf_geo_pow(good_roll);
surf_ind2 = surf_ind(good_roll);

%% Display Results

% Select a region that has typical power variability by clicking at the
% start and stop points with the data cursor and exporting the data cursor
% locations to the workspace as p1 and p2 respectively

figure;
plot(surf_geo_pow2);

%% 

% Discard points that exceed power loss tolerance

start = p1.Position(1);
stop = p2.Position(1);

% Find the typical variability from the good section selected manually
dev = std(surf_geo_pow2(start:stop));
% Remove points where the 10 pts running mean of power is more than 1std
% deviation outside the 1000 pt running mean
metric = (movmean(surf_geo_pow2, 1000) - dev) - movmean(surf_geo_pow2, 10);
ind = find(metric < 0);

seg_num3 = seg_num2(ind);
index3 = index2(ind);
radar3 = radar2(:,ind);
lat3 = lat2(ind);
lon3 = lon2(ind);
altitude3 = altitude2(ind);
surf_geo_pow3 = surf_geo_pow2(ind);
surf_ind3 = surf_ind2(ind);

% Save the data
out_file = strcat('./DerivedData/Demo_CleanSurface.mat');
save(out_file, 'seg_num3', 'index3', 'lat3', 'lon3', 'altitude3', 'surf_geo_pow3', 'surf_ind3');


